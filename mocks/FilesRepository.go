// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "github.com/znobrega/file-storage/pkg/domain/entities"

	usecases "github.com/znobrega/file-storage/pkg/domain/usecases"
)

// FilesRepository is an autogenerated mock type for the FilesRepository type
type FilesRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, file
func (_m *FilesRepository) Delete(ctx context.Context, file entities.File) error {
	ret := _m.Called(ctx, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.File) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields: ctx, data
func (_m *FilesRepository) List(ctx context.Context, data usecases.ListFilesParam) ([]entities.File, error) {
	ret := _m.Called(ctx, data)

	var r0 []entities.File
	if rf, ok := ret.Get(0).(func(context.Context, usecases.ListFilesParam) []entities.File); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, usecases.ListFilesParam) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByDirectory provides a mock function with given fields: ctx, directory
func (_m *FilesRepository) ListByDirectory(ctx context.Context, directory string) ([]entities.File, error) {
	ret := _m.Called(ctx, directory)

	var r0 []entities.File
	if rf, ok := ret.Get(0).(func(context.Context, string) []entities.File); ok {
		r0 = rf(ctx, directory)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, directory)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListById provides a mock function with given fields: ctx, files, userID
func (_m *FilesRepository) ListById(ctx context.Context, files []string, userID *uint64) ([]entities.File, error) {
	ret := _m.Called(ctx, files, userID)

	var r0 []entities.File
	if rf, ok := ret.Get(0).(func(context.Context, []string, *uint64) []entities.File); ok {
		r0 = rf(ctx, files, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []string, *uint64) error); ok {
		r1 = rf(ctx, files, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDirectories provides a mock function with given fields: ctx
func (_m *FilesRepository) ListDirectories(ctx context.Context) ([]entities.File, error) {
	ret := _m.Called(ctx)

	var r0 []entities.File
	if rf, ok := ret.Get(0).(func(context.Context) []entities.File); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, files
func (_m *FilesRepository) Store(ctx context.Context, files []entities.File) error {
	ret := _m.Called(ctx, files)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []entities.File) error); ok {
		r0 = rf(ctx, files)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, newFile
func (_m *FilesRepository) Update(ctx context.Context, newFile *entities.File) error {
	ret := _m.Called(ctx, newFile)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.File) error); ok {
		r0 = rf(ctx, newFile)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
