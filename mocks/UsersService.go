// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	entities "github.com/znobrega/file-storage/pkg/domain/entities"
	dto "github.com/znobrega/file-storage/pkg/dto"
	helpers "github.com/znobrega/file-storage/pkg/infra/helpers"

	mock "github.com/stretchr/testify/mock"
)

// UsersService is an autogenerated mock type for the UsersService type
type UsersService struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UsersService) Create(user entities.User) (*dto.User, error) {
	ret := _m.Called(user)

	var r0 *dto.User
	if rf, ok := ret.Get(0).(func(entities.User) *dto.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: email
func (_m *UsersService) FindByEmail(email string) (*entities.User, error) {
	ret := _m.Called(email)

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(string) *entities.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: userID
func (_m *UsersService) FindById(userID int) (*dto.User, error) {
	ret := _m.Called(userID)

	var r0 *dto.User
	if rf, ok := ret.Get(0).(func(int) *dto.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAll provides a mock function with given fields:
func (_m *UsersService) ListAll() (*dto.Users, error) {
	ret := _m.Called()

	var r0 *dto.Users
	if rf, ok := ret.Get(0).(func() *dto.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Users)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: user
func (_m *UsersService) Login(user entities.User) (*helpers.TokenResponse, error) {
	ret := _m.Called(user)

	var r0 *helpers.TokenResponse
	if rf, ok := ret.Get(0).(func(entities.User) *helpers.TokenResponse); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*helpers.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: user
func (_m *UsersService) Update(user entities.User) (*dto.User, error) {
	ret := _m.Called(user)

	var r0 *dto.User
	if rf, ok := ret.Get(0).(func(entities.User) *dto.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
