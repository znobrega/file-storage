// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dto "github.com/znobrega/file-storage/pkg/dto"

	multipart "mime/multipart"
)

// FilesService is an autogenerated mock type for the FilesService type
type FilesService struct {
	mock.Mock
}

// DeleteFiles provides a mock function with given fields: files, userID
func (_m *FilesService) DeleteFiles(files dto.FileList, userID uint64) ([]dto.FilePublic, error) {
	ret := _m.Called(files, userID)

	var r0 []dto.FilePublic
	if rf, ok := ret.Get(0).(func(dto.FileList, uint64) []dto.FilePublic); ok {
		r0 = rf(files, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.FilePublic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.FileList, uint64) error); ok {
		r1 = rf(files, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFiles provides a mock function with given fields: userId, isPublic, page, limit
func (_m *FilesService) ListFiles(userId *int, isPublic *bool, page int, limit int) ([]dto.FilePublic, error) {
	ret := _m.Called(userId, isPublic, page, limit)

	var r0 []dto.FilePublic
	if rf, ok := ret.Get(0).(func(*int, *bool, int, int) []dto.FilePublic); ok {
		r0 = rf(userId, isPublic, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.FilePublic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*int, *bool, int, int) error); ok {
		r1 = rf(userId, isPublic, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFilesById provides a mock function with given fields: files, userID
func (_m *FilesService) ListFilesById(files []string, userID *uint64) ([]dto.FilePublic, error) {
	ret := _m.Called(files, userID)

	var r0 []dto.FilePublic
	if rf, ok := ret.Get(0).(func([]string, *uint64) []dto.FilePublic); ok {
		r0 = rf(files, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.FilePublic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, *uint64) error); ok {
		r1 = rf(files, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFiles provides a mock function with given fields: files, userID, isPublic
func (_m *FilesService) SaveFiles(files []*multipart.FileHeader, userID uint64, isPublic bool) ([]dto.FilePublic, error) {
	ret := _m.Called(files, userID, isPublic)

	var r0 []dto.FilePublic
	if rf, ok := ret.Get(0).(func([]*multipart.FileHeader, uint64, bool) []dto.FilePublic); ok {
		r0 = rf(files, userID, isPublic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.FilePublic)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*multipart.FileHeader, uint64, bool) error); ok {
		r1 = rf(files, userID, isPublic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
